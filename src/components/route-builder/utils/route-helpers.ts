import type { RouteParams, RouteMetadata } from '../types';

export function generateRouteId(): string {
  return `route_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

export function createRouteMetadata(
  preferences: RouteParams,
  sources: string[] = []
): RouteMetadata {
  return {
    generatedBy: 'pedal-peak-route-builder',
    version: '1.0.0',
    sources,
    generatedAt: new Date(),
    preferences
  };
}

export function generateRouteName(params: RouteParams): string {
  const { startLocation, endLocation, rideType, distance } = params;
  
  // Extract city names from locations (basic implementation)
  const startCity = extractCityName(startLocation);
  const endCity = extractCityName(endLocation);
  
  const avgDistance = Math.round((distance.min + distance.max) / 2);
  const rideTypeLabel = rideType === 'road' ? 'Road' : 'Gravel';
  
  if (startCity === endCity) {
    return `${startCity} ${rideTypeLabel} Loop (${avgDistance}km)`;
  }
  
  return `${startCity} to ${endCity} ${rideTypeLabel} Route (${avgDistance}km)`;
}

export function generateRouteDescription(params: RouteParams): string {
  const { rideType, elevation, pointsOfInterest } = params;
  
  let description = `A ${rideType} cycling route with ${elevation} elevation profile.`;
  
  if (pointsOfInterest.length > 0) {
    const poiTypes = pointsOfInterest.map(poi => poi.type).join(', ');
    description += ` Includes stops at: ${poiTypes}.`;
  }
  
  description += ` Generated by Pedal Peak Route Builder.`;
  
  return description;
}

export function estimateRideTime(
  distanceKm: number,
  elevationGainM: number,
  rideType: 'road' | 'gravel'
): number {
  // Base speed estimates (km/h)
  const baseSpeed = rideType === 'road' ? 25 : 20;
  
  // Time penalty for elevation (minutes per 100m of gain)
  const elevationPenalty = rideType === 'road' ? 3 : 4;
  
  // Base time in minutes
  const baseTime = (distanceKm / baseSpeed) * 60;
  
  // Add elevation penalty
  const elevationTime = (elevationGainM / 100) * elevationPenalty;
  
  return Math.round(baseTime + elevationTime);
}

export function calculateDifficulty(
  distanceKm: number,
  elevationGainM: number,
  rideType: 'road' | 'gravel'
): 'easy' | 'moderate' | 'hard' {
  // Difficulty scoring based on distance and elevation
  let score = 0;
  
  // Distance scoring
  if (distanceKm > 100) score += 3;
  else if (distanceKm > 50) score += 2;
  else if (distanceKm > 25) score += 1;
  
  // Elevation scoring
  if (elevationGainM > 2000) score += 3;
  else if (elevationGainM > 1000) score += 2;
  else if (elevationGainM > 500) score += 1;
  
  // Gravel adds difficulty
  if (rideType === 'gravel') score += 1;
  
  if (score >= 5) return 'hard';
  if (score >= 3) return 'moderate';
  return 'easy';
}

// Helper function to extract city name from location string
function extractCityName(location: string): string {
  // Basic implementation - could be enhanced with geocoding
  const parts = location.split(',');
  return parts[0].trim();
}